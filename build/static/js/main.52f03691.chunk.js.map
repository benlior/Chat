{
  "version": 3,
  "sources": ["components/chat/chat.js", "App.js", "reportWebVitals.js", "index.js"],
  "names": ["socket", "io", "connect", "Chat", "props", "useState", "err", "setErr", "message", "setMessage", "messages", "setMessages", "useEffect", "on", "msg", "className", "name", "id", "length", "map", "m", "type", "placeholder", "value", "onChange", "e", "target", "onClick", "emit", "div", "document", "getElementById", "lastChild", "setTimeout", "scrollIntoView", "App", "setName", "login", "setLogin", "reportWebVitals", "onPerfEntry", "Function", "then", "getCLS", "getFID", "getFCP", "getLCP", "getTTFB", "ReactDOM", "render", "StrictMode"],
  "mappings": "qRAIMA,EAASC,IAAGC,UAELC,EAAO,SAACC,GACjB,MAAsBC,oBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KAyBA,OANAC,qBAAU,WACNZ,EAAOa,GAAG,mBAAmB,SAAAC,GACzBH,EAAY,GAAD,mBAAKD,GAAL,CAAeI,WAK9B,sBAAKC,UAAU,OAAf,UACI,uCAAUX,EAAMY,KAAhB,QACA,qBAAKD,UAAU,WAAWE,GAAG,WAA7B,SACyB,IAApBP,EAASQ,OACNR,EAASS,KAAI,SAAAC,GAAC,OACV,qBAAKL,UAAU,aAAf,SACI,mBAAGA,UAAU,UAAb,SAAwBK,SAG9B,OAETd,EAAM,mBAAGS,UAAU,MAAb,yCAAqD,KAC5D,sBAAKA,UAAU,mBAAf,UACI,uBAAOM,KAAK,OAAON,UAAU,eAAeO,YAAY,gBAAgBC,MAAOf,EAASgB,SAAU,SAACC,GAAD,OAAOhB,EAAWgB,EAAEC,OAAOH,UAC7H,wBAAQR,UAAU,kBAAkBM,KAAK,SAASM,QAtC1C,WAChB,GAAuB,IAAnBnB,EAAQU,OAAZ,CAIAX,GAAO,GACP,IAAMO,EAAMV,EAAMY,KAAO,KAAOR,EAChCR,EAAO4B,KAAK,kBAAmBd,GAC/BL,EAAW,IACX,IAAMoB,EAAMC,SAASC,eAAe,YACd,OAAlBF,EAAIG,WACJC,YAAW,WACPJ,EAAIG,UAAUE,mBACf,UAXH3B,GAAO,IAoCH,yBCbD4B,MAhCf,WACE,MAAwB9B,qBAAxB,mBAAOW,EAAP,KAAaoB,EAAb,KACA,EAA0B/B,oBAAS,GAAnC,mBAAOgC,EAAP,KAAcC,EAAd,KACA,EAAsBjC,oBAAS,GAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAWA,OACE,sBAAKQ,UAAU,MAAf,UACE,6CACEsB,EAUE,cAAC,EAAD,CAAMrB,KAAMA,IATd,sBAAKD,UAAU,QAAf,UACE,iDACCT,EACC,mBAAGS,UAAU,MAAb,0DAAsE,KACxE,sBAAKA,UAAU,mBAAf,UACE,uBAAOM,KAAK,OAAON,UAAU,eAAeO,YAAY,WAAWE,SAAU,SAACC,GAAD,OAAOW,EAAQX,EAAEC,OAAOH,UACrG,wBAAQR,UAAU,kBAAkBM,KAAK,SAASM,QAnBrC,YAChBX,GAAQA,EAAKE,OAAS,EACzBX,GAAO,IAGTA,GAAO,GACP+B,GAAS,KAaD,6BChBGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BQ,M",
  "file": "static/js/main.52f03691.chunk.js",
  "sourcesContent": ["import React, { useEffect, useState } from 'react';\r\nimport './chat.css';\r\nimport io from 'socket.io-client';\r\n\r\nconst socket = io.connect();\r\n\r\nexport const Chat = (props) => {\r\n    const [err, setErr] = useState(false);\r\n    const [message, setMessage] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const sendMessage = () => {\r\n        if (message.length === 0) {\r\n            setErr(true);\r\n            return;\r\n        }\r\n        setErr(false);\r\n        const msg = props.name + \": \" + message;\r\n        socket.emit(\"msg-from-client\", msg);\r\n        setMessage('');\r\n        const div = document.getElementById('messages');\r\n        if (div.lastChild !== null) {\r\n            setTimeout(() => {\r\n                div.lastChild.scrollIntoView();\r\n            }, 1000);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on(\"msg-from-server\", msg => {\r\n            setMessages([...messages, msg]);\r\n        });\r\n    });\r\n\r\n    return (\r\n        <div className='chat'>\r\n            <p>Hello {props.name} !</p>\r\n            <div className='messages' id='messages'>\r\n                {messages.length !== 0 ?\r\n                    messages.map(m =>\r\n                        <div className='messageDiv'>\r\n                            <p className='message'>{m}</p>\r\n                        </div>\r\n                    )\r\n                    : null}\r\n            </div>\r\n            {err ? <p className='err'>You cant send empty message</p> : null}\r\n            <div className=\"input-group mb-3\">\r\n                <input type=\"text\" className=\"form-control\" placeholder=\"Enter message\" value={message} onChange={(e) => setMessage(e.target.value)} />\r\n                <button className=\"btn btn-primary\" type=\"button\" onClick={sendMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}", "import { useState } from 'react';\nimport './App.css';\nimport { Chat } from './components/chat/chat';\n\nfunction App() {\n  const [name, setName] = useState();\n  const [login, setLogin] = useState(false);\n  const [err, setErr] = useState(false);\n\n  const nameValidation = () => {\n    if (!name || name.length < 3) {\n      setErr(true);\n      return;\n    }\n    setErr(false);\n    setLogin(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Online Chat</h1>\n      {!login ?\n        <div className='login'>\n          <p>Enter nickname :</p>\n          {err ?\n            <p className='err'>The nickname must contain at least 3 letters</p> : null}\n          <div className=\"input-group mb-3\">\n            <input type=\"text\" className=\"form-control\" placeholder=\"Nickname\" onChange={(e) => setName(e.target.value)} />\n            <button className=\"btn btn-primary\" type=\"button\" onClick={nameValidation}>Enter</button>\n          </div>\n        </div>\n        : <Chat name={name} />}\n    </div>\n  );\n}\n\nexport default App;\n", "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n", "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],
  "sourceRoot": ""
}